{"version":3,"names":[],"mappings":"","sources":["checkbox-group-dropdown.js"],"sourcesContent":["/*!\n    * Checkbox Group Dropdown v2.0.1\n    *\n    * Copyright 2021-2023 Marshall Crosby\n    * https://marshallcrosby.com\n*/\n\n(function ($) {\n    'use strict';\n    \n    $.fn.checkBoxGroupDropdown = function (options) {\n        $(this).each(function(){\n            var $mainEl = $(this);\n            var toggleBtn = $mainEl.find('.toggle-btn');\n            var toggleTextEl = toggleBtn.find('.toggle-text');\n            var toggleBtnOriginalText = toggleBtn.find('.toggle-text').text();\n            var applyBtn = $mainEl.find('.apply-btn');\n            var clearBtn = $mainEl.find('.clear-btn');\n            var settings;\n\n            // Setting defaults\n            settings = $.extend({\n                'maxAmount': 2\n            }, options);\n\n            // Apply checked class to dropdown item\n            function applyCheckedClass(el) {\n                \n                // Remove has checked class no matter hwhat\n                if (el.attr('type') === 'radio' && el.prop('checked') === true) {\n                    $mainEl\n                        .find('.b-dropdown-item')\n                        .removeClass('js-is-checked');    \n                }\n                \n                // Apply to correct input\n                if (el.prop('checked') === true) {\n                    el\n                        .closest('.b-dropdown-item')\n                        .addClass('js-is-checked');\n                } else {\n                    el\n                        .closest('.b-dropdown-item')\n                        .removeClass('js-is-checked');\n                }\n            }\n\n            // Change toggle button text based on what's selected\n            function updateDropdownToggleText(el, origText) {\n                var $this = $(el);\n                var checkedTextArr = [];\n                var checkedEls = $this.find('input:checked');\n                var checkedAmount = checkedEls.length;\n                var currentAmount = 1;\n               \n                checkedEls.each(function () {\n                    var current = currentAmount;\n                    \n                    // Add string to array\n                    if (current <= settings.maxAmount) {\n                        checkedTextArr.push($.trim($(this).closest('label').text()));\n                    }\n\n                    currentAmount++;\n                });\n                \n                // Add/remove text and required class to toggle button\n                if (checkedAmount === 0) {\n                    toggleBtn.removeClass('js-has-checked');\n                    toggleTextEl.text(origText);\n                } else if (checkedAmount <= settings.maxAmount) {\n                    toggleBtn.addClass('js-has-checked');\n                    toggleTextEl.text(checkedTextArr.join(', '));\n                } else {\n                    toggleBtn.addClass('js-has-checked');\n                    toggleTextEl.text(checkedAmount + ' selected');\n                }\n\n                // Apply control button states\n                if (!checkedEls.length) {\n                    $mainEl\n                        .find('.apply-btn, .clear-btn')\n                        .attr('disabled', 'disabled');\n                } else {\n                    $mainEl\n                        .find('.apply-btn, .clear-btn')\n                        .removeAttr('disabled');\n                }\n            }\n\n            // Fire on load\n            updateDropdownToggleText($mainEl, toggleBtnOriginalText);\n                        \n            // Focus on first or selected item when dropdown is fired\n            var shownHandler = ($mainEl.find('[data-toggle=\"dropdown\"], [data-bs-toggle=\"dropdown\"]').length) ? 'shown.bs.dropdown' : 'shown.dropdown';\n            $mainEl.on(shownHandler, function() {                            \n                var focusOnThisEl = ($mainEl.find('.js-is-checked').length) ? $mainEl.find('.js-is-checked').first('> input') : $mainEl.find('.b-dropdown-item').first().find('input');\n                \n                focusOnThisEl.focus();\n            });\n            \n            // Changes when checkbox is selected\n            $mainEl.find('[type=\"checkbox\"], [type=\"radio\"], label.b-dropdown-item').each(function () {\n                var $this = $(this);\n\n                applyCheckedClass($this);\n\n                $this.on('click', function(e){ \n                    var eTarget = $(e.target);\n                    \n                    e.stopImmediatePropagation();\n\n                    if (eTarget.closest('.dropdown-menu').attr('data-toggle') || eTarget.closest('.dropdown-menu').attr('data-bs-toggle') !== 'dropdown') {\n                        e.stopPropagation();\n                    }\n        \n                    applyCheckedClass($(this));\n                    updateDropdownToggleText($mainEl, toggleBtnOriginalText);\n                });\n            });\n            \n            // Apply button\n            applyBtn.on('click', function () {\n                $(this)\n                    .closest('.b-dropdown')\n                    .find('.toggle-btn')\n                    .attr('aria-expanded', false)\n                    .trigger('click')\n                    .focus();\n            });\n\n            // Clear all button\n            clearBtn.on('click', function() {\n                $mainEl\n                    .find('input:checked')\n                    .each(function(){\n                        $(this)\n                            .prop('checked', false)\n                            .closest('.js-is-checked')\n                            .removeClass('js-is-checked');\n                    })\n                    .find('.toggle-btn')\n                    .removeClass('js-has-checked');\n\n                updateDropdownToggleText($mainEl, toggleBtnOriginalText);\n\n                // Close dropdown by triggering apply button click\n                applyBtn.trigger('click');\n            });\n            \n            // First letter type focus first on entry\n            $mainEl.on('keydown', function (e) {\n                var $this = $(this);\n                \n                $this\n                    .find('.b-dropdown-item')\n                    .each(function(){\n                        var firstLetter = $.trim($(this).text()).charAt(0).toLowerCase();\n                        if ( firstLetter === String.fromCharCode(e.which).toLowerCase() ) {\n                            $(this).focus();\n                            return false;\n                        }\n                    });\n            });\n        });\n    };\n}(jQuery));"],"file":"checkbox-group-dropdown.js"}