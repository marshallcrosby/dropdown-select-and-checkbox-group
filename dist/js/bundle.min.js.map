{"version":3,"sources":["bundle.js"],"names":["$","arrowToNextPrev","element","direction","focusIndex","e","upOrDown","preventDefault","find","focus","fn","toggleAttrBoolean","elAttr","this","attr","closeDropdown","$this","removeClass","closest","window","on","each","$dropdown","dropdownToggle","dropdownMenu","toggleClass","hasClass","trigger","Event","windowHeight","innerHeight","bottomOfViewport","scrollTop","dropdownBottomCoord","outerHeight","offset","scrollBottomCoord","animate","index","removeAttr","keyPressed","which","currentFocusData","data","target","is","length","$target","keyCode","document","activeElement","$thisToggle","has","jQuery","checkBoxGroupDropdown","options","settings","$mainEl","toggleBtn","toggleTextEl","toggleBtnOriginalText","text","applyBtn","clearBtn","applyCheckedClass","el","prop","addClass","updateDropdownToggleText","origText","checkedTextArr","checkedEls","checkedAmount","currentAmount","maxAmount","push","trim","join","extend","shownHandler","first","eTarget","stopImmediatePropagation","stopPropagation","charAt","toLowerCase","String","fromCharCode","renderSelectToDropdownElements","$select","selectID","selectLable","selectLableID","buttonClass","extraOuterClass","iconClass","bootstrapDropdown","bootstrapVersion","wrap","siblings","prepend","type","id","aria-haspopup","aria-expanded","aria-describedby","insertAfter","dataToggle","appendTo","selectToDropdown","dropdownEl","selectDropdownEl","placeHolderEl","placeHolderText","updateMenuDisplay","selected","filter","selectedDropdownItem","val","html","$option","dropdownMenuOptionEntry","append","value","toString","end","refreshSelectToDropdown","remove"],"mappings":"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","sourcesContent":["/*!\n    * Simple Dropdown v2.0.0\n    *\n    * Copyright 2021-2023 Marshall Crosby\n    * https://marshallcrosby.com\n*/\n\n(function ($) {\n    'use strict';\n    \n    // Toggle attribute true/false method\n    $.fn.toggleAttrBoolean = function (elAttr) {\n        $(this).attr(elAttr,\n            $(this).attr(elAttr) === 'false' ? 'true' : 'false'\n        );\n    };\n\n    // Close dropdown method\n    $.fn.closeDropdown = function () {\n        var $this = $(this);\n\n        $this\n            .removeClass('js-dropdown-active')\n            .closest('.b-dropdown')\n            .removeClass('js-dropdown-active')\n            .find('.toggle-btn')\n            .toggleAttrBoolean('aria-expanded');\n\n        $this\n            .closest('.b-dropdown')\n            .find('.b-dropdown-menu')\n            .removeClass('js-is-showing');\n    };\n    \n    // Assign data-arrow-index attr on the fly\n    function assignArrowIndex(element) {\n        var indexEl = (element.find('.b-dropdown-item > input').length) ? element.find('.b-dropdown-item > input, .clear-btn, .apply-btn') : element.find('.b-dropdown-item');\n         \n        indexEl.each(function(index){\n            $(this)\n                .removeAttr('data-arrow-index')\n                .attr('data-arrow-index', index);\n        });\n    }\n\n    function arrowToNextPrev(element, direction, focusIndex, e) {\n        var upOrDown;\n            \n        if (direction === 'up') {\n            upOrDown = focusIndex - 1;\n        } else if (direction === 'down') {\n            upOrDown = focusIndex + 1;\n        }\n        \n        e.preventDefault();\n\n        element\n            .find($('[data-arrow-index=' + upOrDown + ']'))\n            .focus();\n    }\n    \n    $(window).on('select-to-dropdown.ready checkbox-group-dropdown.ready', function() {\n        \n        // Dropdown toggle clicking\n        $('.b-dropdown').each(function() {\n            var $dropdown = $(this);\n            var dropdownToggle = $dropdown.find('.toggle-btn');\n            var dropdownMenu = $dropdown.find('.b-dropdown-menu');\n            \n\n            dropdownToggle.on('click', function(e) {            \n                e.preventDefault();\n                \n                $(this).toggleAttrBoolean('aria-expanded');\n                \n                $dropdown.toggleClass('js-dropdown-active');\n                \n                dropdownMenu.toggleClass('js-is-showing');\n\n                \n                if (dropdownMenu.hasClass('js-is-showing')) {\n                    \n                    // Shown event\n                    $dropdown.trigger($.Event('shown.dropdown'));\n                    \n                    // Scroll into view if needed\n                    var windowHeight = $(window).innerHeight(),\n                        bottomOfViewport = $(window).scrollTop() + windowHeight,\n                        dropdownBottomCoord = dropdownMenu.outerHeight() + (dropdownMenu.offset().top),\n                        scrollBottomCoord = dropdownBottomCoord - windowHeight;\n                                                        \n                    if (dropdownBottomCoord > bottomOfViewport) {\n                        $('html, body').animate({\n                            scrollTop: scrollBottomCoord + 20\n                        }, 250);\n                    }\n                }\n            });\n            \n            // Initial arrow index assign            \n            assignArrowIndex($dropdown);\n            \n            // Make arrow up/down keys tab through the entries\n            $dropdown.on('keydown', function(e) {\n                var $this = $(this);\n                var keyEvent = e;\n                var keyPressed = e.which;\n                var currentFocusData = $(':focus').data('arrow-index');\n                                \n                // Down arrow\n                if (keyPressed === 40) {\n                    arrowToNextPrev($this, 'down', currentFocusData, e);\n                }\n                // Up arrow\n                if (keyPressed === 38) {\n                    arrowToNextPrev($this, 'up', currentFocusData, e);\n                }\n                \n                // Tab key\n                if (keyPressed === 9 && !$(e.target).is(dropdownToggle) && $dropdown.find('[data-arrow-index]').length) {\n                    e.preventDefault();\n                }                    \n            });\n            \n            // Keyboarding\n            $dropdown.on('keyup', function(e) {\n                var $target = $(e.target);\n            \n                // Escape key\n                if (\n                    e.keyCode === 27 &&\n                    $target.closest('.b-dropdown').length &&\n                    $target.closest('.b-dropdown').find('.b-dropdown-menu').hasClass('js-is-showing')\n                ) {\n                    e.preventDefault();\n                    $target\n                        .closest('.b-dropdown')\n                        .find('.toggle-btn')\n                        .focus()\n                        .closeDropdown();\n                }\n                \n                // Tab key\n                if (\n                    e.keyCode === 9 &&\n                    !$(document.activeElement).closest('.b-dropdown').find('.js-is-showing').length\n                ) {\n                    $('.b-dropdown-menu.js-is-showing').closeDropdown();\n                }\n            });\n                        \n            // Allow arrow down key to open dropdown\n            dropdownToggle.on('keyup', function(e) {\n                var $thisToggle = $(this);\n                \n                if (e.which === 40 && $thisToggle.attr('aria-expanded') === 'false') {\n                    $(this).trigger('click');\n                }\n            });\n        });\n                \n        // Close dropdown if clicking out of it\n        $(document).on('click', function(e) {            \n            var dropdown = $('.js-dropdown-active');\n            \n            dropdown.each(function() {\n                var $this = $(this);\n                \n                //check if the clicked area is active dropdown or not\n                if ($this.has(e.target).length === 0) {\n                    $this.closeDropdown();\n                }\n            });\n        });\n    });\n}(jQuery));\n/*!\n    * Checkbox Group Dropdown v2.0.0\n    *\n    * Copyright 2021-2023 Marshall Crosby\n    * https://marshallcrosby.com\n*/\n\n(function ($) {\n    'use strict';\n    \n    $.fn.checkBoxGroupDropdown = function (options) {\n        $(this).each(function(){\n            var $mainEl = $(this);\n            var toggleBtn = $mainEl.find('.toggle-btn');\n            var toggleTextEl = toggleBtn.find('.toggle-text');\n            var toggleBtnOriginalText = toggleBtn.find('.toggle-text').text();\n            var applyBtn = $mainEl.find('.apply-btn');\n            var clearBtn = $mainEl.find('.clear-btn');\n            var settings;\n\n            // Setting defaults\n            settings = $.extend({\n                'maxAmount': 2\n            }, options);\n\n            // Apply checked class to dropdown item\n            function applyCheckedClass(el) {\n                \n                // Remove has checked class no matter hwhat\n                if (el.attr('type') === 'radio' && el.prop('checked') === true) {\n                    $mainEl\n                        .find('.b-dropdown-item')\n                        .removeClass('js-is-checked');    \n                }\n                \n                // Apply to correct input\n                if (el.prop('checked') === true) {\n                    el\n                        .closest('.b-dropdown-item')\n                        .addClass('js-is-checked');\n                } else {\n                    el\n                        .closest('.b-dropdown-item')\n                        .removeClass('js-is-checked');\n                }\n            }\n\n            // Change toggle button text based on what's selected\n            function updateDropdownToggleText(el, origText) {\n                var $this = $(el);\n                var checkedTextArr = [];\n                var checkedEls = $this.find('input:checked');\n                var checkedAmount = checkedEls.length;\n                var currentAmount = 1;\n               \n                checkedEls.each(function () {\n                    var current = currentAmount;\n                    \n                    // Add string to array\n                    if (current <= settings.maxAmount) {\n                        checkedTextArr.push($.trim($(this).closest('label').text()));\n                    }\n\n                    currentAmount++;\n                });\n                \n                // Add/remove text and required class to toggle button\n                if (checkedAmount === 0) {\n                    toggleBtn.removeClass('js-has-checked');\n                    toggleTextEl.text(origText);\n                } else if (checkedAmount <= settings.maxAmount) {\n                    toggleBtn.addClass('js-has-checked');\n                    toggleTextEl.text(checkedTextArr.join(', '));\n                } else {\n                    toggleBtn.addClass('js-has-checked');\n                    toggleTextEl.text(checkedAmount + ' selected');\n                }\n\n                // Apply control button states\n                if (!checkedEls.length) {\n                    $mainEl\n                        .find('.apply-btn, .clear-btn')\n                        .attr('disabled', 'disabled');\n                } else {\n                    $mainEl\n                        .find('.apply-btn, .clear-btn')\n                        .removeAttr('disabled');\n                }\n            }\n\n            // Fire on load\n            updateDropdownToggleText($mainEl, toggleBtnOriginalText);\n                        \n            // Focus on first or selected item when dropdown is fired\n            var shownHandler = ($mainEl.find('[data-toggle=\"dropdown\"], [data-bs-toggle=\"dropdown\"]').length) ? 'shown.bs.dropdown' : 'shown.dropdown';\n            $mainEl.on(shownHandler, function() {                            \n                var focusOnThisEl = ($mainEl.find('.js-is-checked').length) ? $mainEl.find('.js-is-checked').first('> input') : $mainEl.find('.b-dropdown-item').first().find('input');\n                \n                focusOnThisEl.focus();\n            });\n            \n            // Changes when checkbox is selected\n            $mainEl.find('[type=\"checkbox\"], [type=\"radio\"], label.b-dropdown-item').each(function () {\n                var $this = $(this);\n\n                applyCheckedClass($this);\n\n                $this.on('click', function(e){ \n                    var eTarget = $(e.target);\n                    \n                    e.stopImmediatePropagation();\n\n                    if (eTarget.closest('.dropdown-menu').attr('data-toggle') || eTarget.closest('.dropdown-menu').attr('data-bs-toggle') !== 'dropdown') {\n                        e.stopPropagation();\n                    }\n        \n                    applyCheckedClass($(this));\n                    updateDropdownToggleText($mainEl, toggleBtnOriginalText);\n                });\n            });\n            \n            // Apply button\n            applyBtn.on('click', function () {\n                $(this)\n                    .closest('.b-dropdown')\n                    .find('.toggle-btn')\n                    .attr('aria-expanded', false)\n                    .trigger('click')\n                    .focus();\n            });\n\n            // Clear all button\n            clearBtn.on('click', function() {\n                $mainEl\n                    .find('input:checked')\n                    .each(function(){\n                        $(this)\n                            .prop('checked', false)\n                            .closest('.js-is-checked')\n                            .removeClass('js-is-checked');\n                    })\n                    .find('.toggle-btn')\n                    .removeClass('js-has-checked');\n\n                updateDropdownToggleText($mainEl, toggleBtnOriginalText);\n\n                // Close dropdown by triggering apply button click\n                applyBtn.trigger('click');\n            });\n            \n            // First letter type focus first on entry\n            $mainEl.on('keydown', function (e) {\n                var $this = $(this);\n                \n                $this\n                    .find('.b-dropdown-item')\n                    .each(function(){\n                        var firstLetter = $.trim($(this).text()).charAt(0).toLowerCase();\n                        if ( firstLetter === String.fromCharCode(e.which).toLowerCase() ) {\n                            $(this).focus();\n                            return false;\n                        }\n                    });\n            });\n        });\n    };\n}(jQuery));\n/*!\n    * Select to Dropdown v2.0.0\n    *\n    * Copyright 2021-2023 Marshall Crosby\n    * https://marshallcrosby.com\n*/\n\n(function ($) {\n    'use strict';\n    \n    $.fn.renderSelectToDropdownElements = function (options) { \n        $(this).each(function() {\n            var $select = $(this);\n            var selectID = $select.attr('id');\n            var selectLable = $('[for=\"' + selectID + '\"]');\n            var selectLableID = selectLable.attr('id');\n                            \n            // Setting defaults\n            var settings = $.extend({\n                'buttonClass': '',\n                'extraOuterClass': '',\n                'iconClass': '',\n                'bootstrapDropdown': false,\n                'bootstrapVersion': ''\n            }, options);\n            \n            // Wrap in dropdown el\n            $(this).wrap('<div class=\"select-default select-to-dropdown b-dropdown dropdown ' + settings.extraOuterClass + '\"></div>');\n            \n            selectLable\n                .siblings('.select-to-dropdown')\n                .first()\n                .prepend(selectLable);\n            \n            $('<button>')\n                .addClass('toggle-btn ' + settings.buttonClass)\n                .attr({\n                    'type': 'button',\n                    'id': selectID + '-toggle-btn',\n                    'aria-haspopup': true,\n                    'aria-expanded': false,\n                    'aria-describedby': selectLableID\n                })\n                .insertAfter($(this).closest('.select-to-dropdown select'));\n                \n            if (settings.bootstrapDropdown === true) {\n                var dataToggle = (settings.bootstrapVersion === '4') ? 'data-toggle' : 'data-bs-toggle'\n                $select\n                    .closest('.select-to-dropdown')\n                    .find('.toggle-btn')\n                    .attr(dataToggle, 'dropdown');    \n            }\n        \n            $('<span>')\n                .addClass('toggle-text')\n                .appendTo($(this).closest('.select-to-dropdown').find('.toggle-btn'));\n        \n            $('<span>')\n                .addClass('toggle-indicator ' + settings.iconClass)\n                .attr('aria-hidden', true)\n                .appendTo($(this).closest('.select-to-dropdown').find('.toggle-btn'));\n        \n            $('<div>')\n                .addClass('dropdown-menu b-dropdown-menu p-0')\n                .attr('aria-labelledby', selectID + '-toggle-btn')\n                .appendTo($(this).closest('.select-to-dropdown'));\n        });\n    };\n    \n    $.fn.selectToDropdown = function () {   \n        $(this).each(function(){\n            var dropdownEl = $(this);\n            var selectDropdownEl = dropdownEl.find('select');\n            var placeHolderEl = dropdownEl.find('.toggle-text');\n            var dropdownToggle = dropdownEl.find('.toggle-btn');\n            var placeHolderText = (placeHolderEl.text() !== '') ? placeHolderEl.text() : selectDropdownEl.find('[value=\"\"]').text();\n            var dropdownMenu = dropdownEl.find('.b-dropdown-menu');\n            \n            $('<ul>').appendTo(dropdownMenu);\n            \n            // Build menu\n            selectDropdownEl\n                .attr('aria-hidden', 'true')\n                .find('option').each(function () {\n                    var $option = $(this);\n\n                    var dropdownMenuOptionEntry = $('<button>')\n                        .attr('type', 'button')\n                        .addClass('b-dropdown-item dropdown-item')\n                        .attr('data-value', $option.val())\n                        .text($option.text());\n                                            \n                    if ($option.attr('disabled')) {\n                        dropdownMenuOptionEntry\n                            .addClass('disabled')\n                            .prop('disabled', true);\n                    }\n                    \n                    dropdownMenu\n                        .find('ul')\n                        .append(dropdownMenuOptionEntry);\n                });\n                \n            // Wrap in li\n            dropdownMenu\n                .find('.b-dropdown-item')\n                .each(function(){\n                    $(this)\n                        .wrap('<li>');\n                });\n            \n            function updateMenuDisplay() {\n                \n                // Initial selected item class removal\n                dropdownEl\n                    .find('.js-item-selected')\n                    .removeClass('js-item-selected');\n\n                // Get selected option from select\n                var selected = selectDropdownEl\n                    .find('option')\n                    .filter(function() {\n                        return $(this).prop('selected');\n                    });\n\n                var selectedDropdownItem = dropdownEl.find('[data-value=\"' + selected.val() + '\"]');\n\n                // Set selected option text in toggle button\n                if (selected.val() === '') {\n                    placeHolderEl.html(placeHolderText);\n                    dropdownToggle.removeClass('js-has-selected');\n                } else {\n                    selectedDropdownItem.addClass('js-item-selected');\n                    dropdownToggle.addClass('js-has-selected');\n                    placeHolderEl.html(selected.text() + ' <span class=\"sr-only\">selected</span>');\n                }\n            }\n            \n            // Initial update\n            updateMenuDisplay();\n\n            dropdownEl.find('.b-dropdown-item').on('click', function(e) {\n                e.preventDefault();\n\n                var value = $(this).data('value');\n                var eTarget = $(e.target);\n\n                // Select the correct option\n                dropdownEl\n                    .find('option')\n                    .prop('selected', false);\n\n                var optionToSelect = dropdownEl.find('option').filter(function() {\n                    return $(this).val().toString() === value.toString();\n                });\n                \n                optionToSelect.prop('selected', true);\n\n                // Update after click\n                updateMenuDisplay();\n\n                // Focus on dropdown toggle after selection is made\n                dropdownToggle.focus();\n                \n                // Trigger change\n                selectDropdownEl.trigger('change');\n                \n                // Close if using simple-dropdown.js\n                if (eTarget.closest('.dropdown-menu').attr('data-toggle') !== 'dropdown') {\n                    eTarget\n                        .closest('.b-dropdown')\n                        .removeClass('js-dropdown-active')\n                        .end()\n                        .closest('.b-dropdown')\n                        .find('.b-dropdown-menu')\n                        .removeClass('js-is-showing')\n                        .end()\n                        .closest('.b-dropdown')\n                        .find('.toggle-btn')\n                        .attr('aria-expanded', false);\n                }\n            });\n            \n            // Focus on first or selected item when dropdown is fired\n            var shownHandler = (dropdownEl.find('[data-toggle=\"dropdown\"]').length) ? 'shown.bs.dropdown' : 'shown.dropdown';\n            dropdownEl.on(shownHandler, function() {\n                var focusOnThisEl = (dropdownEl.find('.js-item-selected').length) ? dropdownEl.find('.js-item-selected') : dropdownEl.find('.b-dropdown-item').first();\n                focusOnThisEl.focus();\n            });\n\n            // First letter type focus first on entry\n            dropdownEl.on('keydown', function (e) {\n                var $this = $(this);\n                \n                $this\n                    .find('.b-dropdown-item')\n                    .each(function() {\n                        if ( $(this).text().charAt(0).toLowerCase() === String.fromCharCode(e.which).toLowerCase() ) {\n                            $(this).focus();\n                            return false;\n                        }\n                    });\n            });            \n        });\n        \n        $(window).trigger($.Event('select-to-dropdown.ready'));\n    };\n\n    $.fn.refreshSelectToDropdown = function() {\n        $(this).each(function() {\n            $(this)\n                .find('.toggle-text')\n                .html('')\n                .end()\n                .find('.b-dropdown-menu > *')\n                .remove()\n                .end()\n                .selectToDropdown();\n        });\n    };\n}(jQuery));"]}