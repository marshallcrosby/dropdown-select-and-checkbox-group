{"version":3,"sources":["select-to-dropdown.js"],"names":["$","fn","renderSelectToDropdownElements","options","this","each","$select","selectID","attr","selectLable","selectLableID","settings","extend","buttonClass","extraOuterClass","iconClass","bootstrapDropdown","bootstrapVersion","wrap","siblings","first","prepend","addClass","type","id","aria-haspopup","aria-expanded","aria-describedby","insertAfter","closest","dataToggle","find","appendTo","selectToDropdown","dropdownEl","selectDropdownEl","placeHolderEl","dropdownToggle","placeHolderText","text","dropdownMenu","updateMenuDisplay","removeClass","selected","filter","prop","selectedDropdownItem","val","html","$option","dropdownMenuOptionEntry","append","on","e","preventDefault","value","data","eTarget","target","toString","focus","trigger","end","shownHandler","charAt","toLowerCase","String","fromCharCode","which","window","Event","refreshSelectToDropdown","remove","jQuery"],"mappings":";;;;;;CAOC,SAAUA,GACP,aAEAA,EAAEC,GAAGC,+BAAiC,SAAUC,GAC5CH,EAAEI,MAAMC,KAAK,WACT,IAAIC,EAAUN,EAAEI,MACZG,EAAWD,EAAQE,KAAK,MACxBC,EAAcT,EAAE,SAAWO,EAAW,MACtCG,EAAgBD,EAAYD,KAAK,MAGjCG,EAAWX,EAAEY,OAAO,CACpBC,YAAe,GACfC,gBAAmB,GACnBC,UAAa,GACbC,mBAAqB,EACrBC,iBAAoB,IACrBd,GAqBH,GAlBAH,EAAEI,MAAMc,KAAK,qEAAuEP,EAASG,gBAAkB,YAE/GL,EACKU,SAAS,uBACTC,QACAC,QAAQZ,GAEbT,EAAE,YACGsB,SAAS,cAAgBX,EAASE,aAClCL,KAAK,CACFe,KAAQ,SACRC,GAAMjB,EAAW,cACjBkB,iBAAiB,EACjBC,iBAAiB,EACjBC,mBAAoBjB,IAEvBkB,YAAY5B,EAAEI,MAAMyB,QAAQ,gCAEE,IAA/BlB,EAASK,kBAA4B,CACrC,IAAIc,EAA4C,MAA9BnB,EAASM,iBAA4B,cAAgB,iBACvEX,EACKuB,QAAQ,uBACRE,KAAK,eACLvB,KAAKsB,EAAY,YAG1B9B,EAAE,UACGsB,SAAS,eACTU,SAAShC,EAAEI,MAAMyB,QAAQ,uBAAuBE,KAAK,gBAE1D/B,EAAE,UACGsB,SAAS,oBAAsBX,EAASI,WACxCP,KAAK,eAAe,GACpBwB,SAAShC,EAAEI,MAAMyB,QAAQ,uBAAuBE,KAAK,gBAE1D/B,EAAE,SACGsB,SAAS,qCACTd,KAAK,kBAAmBD,EAAW,eACnCyB,SAAShC,EAAEI,MAAMyB,QAAQ,2BAItC7B,EAAEC,GAAGgC,iBAAmB,WACpBjC,EAAEI,MAAMC,KAAK,WACT,IAAI6B,EAAalC,EAAEI,MACf+B,EAAmBD,EAAWH,KAAK,UACnCK,EAAgBF,EAAWH,KAAK,gBAChCM,EAAiBH,EAAWH,KAAK,eACjCO,EAA4C,KAAzBF,EAAcG,OAAiBH,EAAcG,OAASJ,EAAiBJ,KAAK,cAAcQ,OAC7GC,EAAeN,EAAWH,KAAK,oBAmCnC,SAASU,IAGLP,EACKH,KAAK,qBACLW,YAAY,oBAGjB,IAAIC,EAAWR,EACVJ,KAAK,UACLa,OAAO,WACJ,OAAO5C,EAAEI,MAAMyC,KAAK,cAGxBC,EAAuBZ,EAAWH,KAAK,gBAAkBY,EAASI,MAAQ,MAGvD,KAAnBJ,EAASI,OACTX,EAAcY,KAAKV,GACnBD,EAAeK,YAAY,qBAE3BI,EAAqBxB,SAAS,oBAC9Be,EAAef,SAAS,mBACxBc,EAAcY,KAAKL,EAASJ,OAAS,2CAxD7CvC,EAAE,QAAQgC,SAASQ,GAGnBL,EACK3B,KAAK,cAAe,QACpBuB,KAAK,UAAU1B,KAAK,WACjB,IAAI4C,EAAUjD,EAAEI,MAEZ8C,EAA0BlD,EAAE,YAC3BQ,KAAK,OAAQ,UACbc,SAAS,iCACTd,KAAK,aAAcyC,EAAQF,OAC3BR,KAAKU,EAAQV,QAEdU,EAAQzC,KAAK,aACb0C,EACK5B,SAAS,YACTuB,KAAK,YAAY,GAG1BL,EACKT,KAAK,MACLoB,OAAOD,KAIpBV,EACKT,KAAK,oBACL1B,KAAK,WACFL,EAAEI,MACGc,KAAK,UA+BlBuB,IAEAP,EAAWH,KAAK,oBAAoBqB,GAAG,QAAS,SAASC,GACrDA,EAAEC,iBAEF,IAAIC,EAAQvD,EAAEI,MAAMoD,KAAK,SACrBC,EAAUzD,EAAEqD,EAAEK,QAGlBxB,EACKH,KAAK,UACLc,KAAK,YAAY,GAEDX,EAAWH,KAAK,UAAUa,OAAO,WAClD,OAAO5C,EAAEI,MAAM2C,MAAMY,aAAeJ,EAAMI,aAG/Bd,KAAK,YAAY,GAGhCJ,IAGAJ,EAAeuB,QAGfzB,EAAiB0B,QAAQ,UAGqC,aAA1DJ,EAAQ5B,QAAQ,kBAAkBrB,KAAK,gBACvCiD,EACK5B,QAAQ,eACRa,YAAY,sBACZoB,MACAjC,QAAQ,eACRE,KAAK,oBACLW,YAAY,iBACZoB,MACAjC,QAAQ,eACRE,KAAK,eACLvB,KAAK,iBAAiB,KAKnC,IAAIuD,EAAgB7B,EAAWH,KAAK,4BAAkC,OAAI,oBAAsB,iBAChGG,EAAWkB,GAAGW,EAAc,YACH7B,EAAWH,KAAK,qBAA2B,OAAIG,EAAWH,KAAK,qBAAuBG,EAAWH,KAAK,oBAAoBX,SACjIwC,UAIlB1B,EAAWkB,GAAG,UAAW,SAAUC,GACnBrD,EAAEI,MAGT2B,KAAK,oBACL1B,KAAK,WACF,GAAKL,EAAEI,MAAMmC,OAAOyB,OAAO,GAAGC,gBAAkBC,OAAOC,aAAad,EAAEe,OAAOH,cAEzE,OADAjE,EAAEI,MAAMwD,SACD,QAM3B5D,EAAEqE,QAAQR,QAAQ7D,EAAEsE,MAAM,8BAG9BtE,EAAEC,GAAGsE,wBAA0B,WAC3BvE,EAAEI,MAAMC,KAAK,WACTL,EAAEI,MACG2B,KAAK,gBACLiB,KAAK,IACLc,MACA/B,KAAK,wBACLyC,SACAV,MACA7B,sBAlNjB,CAqNEwC","sourcesContent":["/*!\n    * Select to Dropdown v2.0.1\n    *\n    * Copyright 2021-2023 Marshall Crosby\n    * https://marshallcrosby.com\n*/\n\n(function ($) {\n    'use strict';\n    \n    $.fn.renderSelectToDropdownElements = function (options) { \n        $(this).each(function() {\n            var $select = $(this);\n            var selectID = $select.attr('id');\n            var selectLable = $('[for=\"' + selectID + '\"]');\n            var selectLableID = selectLable.attr('id');\n                            \n            // Setting defaults\n            var settings = $.extend({\n                'buttonClass': '',\n                'extraOuterClass': '',\n                'iconClass': '',\n                'bootstrapDropdown': false,\n                'bootstrapVersion': ''\n            }, options);\n            \n            // Wrap in dropdown el\n            $(this).wrap('<div class=\"select-default select-to-dropdown b-dropdown dropdown ' + settings.extraOuterClass + '\"></div>');\n            \n            selectLable\n                .siblings('.select-to-dropdown')\n                .first()\n                .prepend(selectLable);\n            \n            $('<button>')\n                .addClass('toggle-btn ' + settings.buttonClass)\n                .attr({\n                    'type': 'button',\n                    'id': selectID + '-toggle-btn',\n                    'aria-haspopup': true,\n                    'aria-expanded': false,\n                    'aria-describedby': selectLableID\n                })\n                .insertAfter($(this).closest('.select-to-dropdown select'));\n                \n            if (settings.bootstrapDropdown === true) {\n                var dataToggle = (settings.bootstrapVersion === '4') ? 'data-toggle' : 'data-bs-toggle'\n                $select\n                    .closest('.select-to-dropdown')\n                    .find('.toggle-btn')\n                    .attr(dataToggle, 'dropdown');    \n            }\n        \n            $('<span>')\n                .addClass('toggle-text')\n                .appendTo($(this).closest('.select-to-dropdown').find('.toggle-btn'));\n        \n            $('<span>')\n                .addClass('toggle-indicator ' + settings.iconClass)\n                .attr('aria-hidden', true)\n                .appendTo($(this).closest('.select-to-dropdown').find('.toggle-btn'));\n        \n            $('<div>')\n                .addClass('dropdown-menu b-dropdown-menu p-0')\n                .attr('aria-labelledby', selectID + '-toggle-btn')\n                .appendTo($(this).closest('.select-to-dropdown'));\n        });\n    };\n    \n    $.fn.selectToDropdown = function () {   \n        $(this).each(function(){\n            var dropdownEl = $(this);\n            var selectDropdownEl = dropdownEl.find('select');\n            var placeHolderEl = dropdownEl.find('.toggle-text');\n            var dropdownToggle = dropdownEl.find('.toggle-btn');\n            var placeHolderText = (placeHolderEl.text() !== '') ? placeHolderEl.text() : selectDropdownEl.find('[value=\"\"]').text();\n            var dropdownMenu = dropdownEl.find('.b-dropdown-menu');\n            \n            $('<ul>').appendTo(dropdownMenu);\n            \n            // Build menu\n            selectDropdownEl\n                .attr('aria-hidden', 'true')\n                .find('option').each(function () {\n                    var $option = $(this);\n\n                    var dropdownMenuOptionEntry = $('<button>')\n                        .attr('type', 'button')\n                        .addClass('b-dropdown-item dropdown-item')\n                        .attr('data-value', $option.val())\n                        .text($option.text());\n                                            \n                    if ($option.attr('disabled')) {\n                        dropdownMenuOptionEntry\n                            .addClass('disabled')\n                            .prop('disabled', true);\n                    }\n                    \n                    dropdownMenu\n                        .find('ul')\n                        .append(dropdownMenuOptionEntry);\n                });\n                \n            // Wrap in li\n            dropdownMenu\n                .find('.b-dropdown-item')\n                .each(function(){\n                    $(this)\n                        .wrap('<li>');\n                });\n            \n            function updateMenuDisplay() {\n                \n                // Initial selected item class removal\n                dropdownEl\n                    .find('.js-item-selected')\n                    .removeClass('js-item-selected');\n\n                // Get selected option from select\n                var selected = selectDropdownEl\n                    .find('option')\n                    .filter(function() {\n                        return $(this).prop('selected');\n                    });\n\n                var selectedDropdownItem = dropdownEl.find('[data-value=\"' + selected.val() + '\"]');\n\n                // Set selected option text in toggle button\n                if (selected.val() === '') {\n                    placeHolderEl.html(placeHolderText);\n                    dropdownToggle.removeClass('js-has-selected');\n                } else {\n                    selectedDropdownItem.addClass('js-item-selected');\n                    dropdownToggle.addClass('js-has-selected');\n                    placeHolderEl.html(selected.text() + ' <span class=\"sr-only\">selected</span>');\n                }\n            }\n            \n            // Initial update\n            updateMenuDisplay();\n\n            dropdownEl.find('.b-dropdown-item').on('click', function(e) {\n                e.preventDefault();\n\n                var value = $(this).data('value');\n                var eTarget = $(e.target);\n\n                // Select the correct option\n                dropdownEl\n                    .find('option')\n                    .prop('selected', false);\n\n                var optionToSelect = dropdownEl.find('option').filter(function() {\n                    return $(this).val().toString() === value.toString();\n                });\n                \n                optionToSelect.prop('selected', true);\n\n                // Update after click\n                updateMenuDisplay();\n\n                // Focus on dropdown toggle after selection is made\n                dropdownToggle.focus();\n                \n                // Trigger change\n                selectDropdownEl.trigger('change');\n                \n                // Close if using simple-dropdown.js\n                if (eTarget.closest('.dropdown-menu').attr('data-toggle') !== 'dropdown') {\n                    eTarget\n                        .closest('.b-dropdown')\n                        .removeClass('js-dropdown-active')\n                        .end()\n                        .closest('.b-dropdown')\n                        .find('.b-dropdown-menu')\n                        .removeClass('js-is-showing')\n                        .end()\n                        .closest('.b-dropdown')\n                        .find('.toggle-btn')\n                        .attr('aria-expanded', false);\n                }\n            });\n            \n            // Focus on first or selected item when dropdown is fired\n            var shownHandler = (dropdownEl.find('[data-toggle=\"dropdown\"]').length) ? 'shown.bs.dropdown' : 'shown.dropdown';\n            dropdownEl.on(shownHandler, function() {\n                var focusOnThisEl = (dropdownEl.find('.js-item-selected').length) ? dropdownEl.find('.js-item-selected') : dropdownEl.find('.b-dropdown-item').first();\n                focusOnThisEl.focus();\n            });\n\n            // First letter type focus first on entry\n            dropdownEl.on('keydown', function (e) {\n                var $this = $(this);\n                \n                $this\n                    .find('.b-dropdown-item')\n                    .each(function() {\n                        if ( $(this).text().charAt(0).toLowerCase() === String.fromCharCode(e.which).toLowerCase() ) {\n                            $(this).focus();\n                            return false;\n                        }\n                    });\n            });            \n        });\n        \n        $(window).trigger($.Event('select-to-dropdown.ready'));\n    };\n\n    $.fn.refreshSelectToDropdown = function() {\n        $(this).each(function() {\n            $(this)\n                .find('.toggle-text')\n                .html('')\n                .end()\n                .find('.b-dropdown-menu > *')\n                .remove()\n                .end()\n                .selectToDropdown();\n        });\n    };\n}(jQuery));"]}