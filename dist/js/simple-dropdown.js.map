{"version":3,"names":[],"mappings":"","sources":["simple-dropdown.js"],"sourcesContent":["/*!\n    * Simple Dropdown v2.0.0\n    *\n    * Copyright 2021-2023 Marshall Crosby\n    * https://marshallcrosby.com\n*/\n\n(function ($) {\n    'use strict';\n    \n    // Toggle attribute true/false method\n    $.fn.toggleAttrBoolean = function (elAttr) {\n        $(this).attr(elAttr,\n            $(this).attr(elAttr) === 'false' ? 'true' : 'false'\n        );\n    };\n\n    // Close dropdown method\n    $.fn.closeDropdown = function () {\n        var $this = $(this);\n\n        $this\n            .removeClass('js-dropdown-active')\n            .closest('.b-dropdown')\n            .removeClass('js-dropdown-active')\n            .find('.toggle-btn')\n            .toggleAttrBoolean('aria-expanded');\n\n        $this\n            .closest('.b-dropdown')\n            .find('.b-dropdown-menu')\n            .removeClass('js-is-showing');\n    };\n    \n    // Assign data-arrow-index attr on the fly\n    function assignArrowIndex(element) {\n        var indexEl = (element.find('.b-dropdown-item > input').length) ? element.find('.b-dropdown-item > input, .clear-btn, .apply-btn') : element.find('.b-dropdown-item');\n         \n        indexEl.each(function(index){\n            $(this)\n                .removeAttr('data-arrow-index')\n                .attr('data-arrow-index', index);\n        });\n    }\n\n    function arrowToNextPrev(element, direction, focusIndex, e) {\n        var upOrDown;\n            \n        if (direction === 'up') {\n            upOrDown = focusIndex - 1;\n        } else if (direction === 'down') {\n            upOrDown = focusIndex + 1;\n        }\n        \n        e.preventDefault();\n\n        element\n            .find($('[data-arrow-index=' + upOrDown + ']'))\n            .focus();\n    }\n    \n    $(window).on('select-to-dropdown.ready checkbox-group-dropdown.ready', function() {\n        \n        // Dropdown toggle clicking\n        $('.b-dropdown').each(function() {\n            var $dropdown = $(this);\n            var dropdownToggle = $dropdown.find('.toggle-btn');\n            var dropdownMenu = $dropdown.find('.b-dropdown-menu');\n            \n\n            dropdownToggle.on('click', function(e) {            \n                e.preventDefault();\n                \n                $(this).toggleAttrBoolean('aria-expanded');\n                \n                $dropdown.toggleClass('js-dropdown-active');\n                \n                dropdownMenu.toggleClass('js-is-showing');\n\n                \n                if (dropdownMenu.hasClass('js-is-showing')) {\n                    \n                    // Shown event\n                    $dropdown.trigger($.Event('shown.dropdown'));\n                    \n                    // Scroll into view if needed\n                    var windowHeight = $(window).innerHeight(),\n                        bottomOfViewport = $(window).scrollTop() + windowHeight,\n                        dropdownBottomCoord = dropdownMenu.outerHeight() + (dropdownMenu.offset().top),\n                        scrollBottomCoord = dropdownBottomCoord - windowHeight;\n                                                        \n                    if (dropdownBottomCoord > bottomOfViewport) {\n                        $('html, body').animate({\n                            scrollTop: scrollBottomCoord + 20\n                        }, 250);\n                    }\n                }\n            });\n            \n            // Initial arrow index assign            \n            assignArrowIndex($dropdown);\n            \n            // Make arrow up/down keys tab through the entries\n            $dropdown.on('keydown', function(e) {\n                var $this = $(this);\n                var keyEvent = e;\n                var keyPressed = e.which;\n                var currentFocusData = $(':focus').data('arrow-index');\n                                \n                // Down arrow\n                if (keyPressed === 40) {\n                    arrowToNextPrev($this, 'down', currentFocusData, e);\n                }\n                // Up arrow\n                if (keyPressed === 38) {\n                    arrowToNextPrev($this, 'up', currentFocusData, e);\n                }\n                \n                // Tab key\n                if (keyPressed === 9 && !$(e.target).is(dropdownToggle) && $dropdown.find('[data-arrow-index]').length) {\n                    e.preventDefault();\n                }                    \n            });\n            \n            // Keyboarding\n            $dropdown.on('keyup', function(e) {\n                var $target = $(e.target);\n            \n                // Escape key\n                if (\n                    e.keyCode === 27 &&\n                    $target.closest('.b-dropdown').length &&\n                    $target.closest('.b-dropdown').find('.b-dropdown-menu').hasClass('js-is-showing')\n                ) {\n                    e.preventDefault();\n                    $target\n                        .closest('.b-dropdown')\n                        .find('.toggle-btn')\n                        .focus()\n                        .closeDropdown();\n                }\n                \n                // Tab key\n                if (\n                    e.keyCode === 9 &&\n                    !$(document.activeElement).closest('.b-dropdown').find('.js-is-showing').length\n                ) {\n                    $('.b-dropdown-menu.js-is-showing').closeDropdown();\n                }\n            });\n                        \n            // Allow arrow down key to open dropdown\n            dropdownToggle.on('keyup', function(e) {\n                var $thisToggle = $(this);\n                \n                if (e.which === 40 && $thisToggle.attr('aria-expanded') === 'false') {\n                    $(this).trigger('click');\n                }\n            });\n        });\n                \n        // Close dropdown if clicking out of it\n        $(document).on('click', function(e) {            \n            var dropdown = $('.js-dropdown-active');\n            \n            dropdown.each(function() {\n                var $this = $(this);\n                \n                //check if the clicked area is active dropdown or not\n                if ($this.has(e.target).length === 0) {\n                    $this.closeDropdown();\n                }\n            });\n        });\n    });\n}(jQuery));"],"file":"simple-dropdown.js"}